# -*- coding: utf-8 -*-
"""Naive-Bayes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g83al8a0Gmgy9f9iL_WqRBgsDSUUp3d1
"""

def by_class(dataset):
  sept = dict()
  for i in range(len(dataset)):
    vector = dataset[i]
    class_val = vector[-1]
    if(class_val not in sept):
      sept[class_val] = list()
      sept[class_val].append(vector)
  return sept

dataset = [[65.9,71.2,0],
 [52.98,13.78,0],
 [19.258,3.368360954,0],
 [3.582294042,4.67917911,0],
 [2.280362439,2.866990263,0],
 [7.423436942,4.696522875,1],
 [5.745051997,3.533989803,1],
 [9.172168622,2.511101045,1],
 [7.792783481,3.424088941,1],
 [7.939820817,0.791637231,1]]



def mean(numbers):
 return sum(numbers)/float(len(numbers))

def stdev(numbers):
 avg = mean(numbers)
 variance = sum([(x-avg)**2 for x in numbers]) / float(len(numbers)-1)
 return sqrt(variance)


def summarize_dataset(dataset):
 summaries = [(mean(column), stdev(column), len(column)) for column in zip(*dataset)]
 del(summaries[-1])
 return summaries


def summcl(dataset):
 sept = separate_by_class(dataset)
 summ = dict()
 for class_value, rows in sept.items():
  summ[class_value] = summarize_dataset(rows)
 return summ


def calculate_probability(x, mean, stdev):
 exponent = exp(-((x-mean)**2 / (2 * stdev**2 )))
 return (1 / (sqrt(2 * pi) * stdev)) * exponent


def calculate_class_probabilities(summaries, row):
 total_rows = sum([summaries[label][0][2] for label in summaries])
 probabilities = dict()
 for class_value, class_summaries in summaries.items():
  probabilities[class_value] = summaries[class_value][0][2]/float(total_rows)
 for i in range(len(class_summaries)):
  mean, stdev, _ = class_summaries[i]
  probabilities[class_value] *= calculate_probability(row[i], mean, stdev)
 return probabilities